// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MPUInterface.proto

#include "MPUInterface.pb.h"
#include "MPUInterface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Interface {

static const char* MPUInterface_method_names[] = {
  "/Interface.MPUInterface/InitSession",
  "/Interface.MPUInterface/EndSession",
  "/Interface.MPUInterface/ConfigProcess",
  "/Interface.MPUInterface/EndProcess",
  "/Interface.MPUInterface/ActionList",
};

std::unique_ptr< MPUInterface::Stub> MPUInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MPUInterface::Stub> stub(new MPUInterface::Stub(channel, options));
  return stub;
}

MPUInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitSession_(MPUInterface_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndSession_(MPUInterface_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigProcess_(MPUInterface_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndProcess_(MPUInterface_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActionList_(MPUInterface_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MPUInterface::Stub::InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::Interface::InitSessionResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Interface::InitSessionReq, ::Interface::InitSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitSession_, context, request, response);
}

void MPUInterface::Stub::async::InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Interface::InitSessionReq, ::Interface::InitSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitSession_, context, request, response, std::move(f));
}

void MPUInterface::Stub::async::InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>* MPUInterface::Stub::PrepareAsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Interface::InitSessionResp, ::Interface::InitSessionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>* MPUInterface::Stub::AsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MPUInterface::Stub::EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::Interface::EndSessionResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Interface::EndSessionReq, ::Interface::EndSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndSession_, context, request, response);
}

void MPUInterface::Stub::async::EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Interface::EndSessionReq, ::Interface::EndSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndSession_, context, request, response, std::move(f));
}

void MPUInterface::Stub::async::EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>* MPUInterface::Stub::PrepareAsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Interface::EndSessionResp, ::Interface::EndSessionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>* MPUInterface::Stub::AsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MPUInterface::Stub::ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::Interface::ConfigResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Interface::ConfigReq, ::Interface::ConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfigProcess_, context, request, response);
}

void MPUInterface::Stub::async::ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Interface::ConfigReq, ::Interface::ConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigProcess_, context, request, response, std::move(f));
}

void MPUInterface::Stub::async::ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfigProcess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>* MPUInterface::Stub::PrepareAsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Interface::ConfigResp, ::Interface::ConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfigProcess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>* MPUInterface::Stub::AsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MPUInterface::Stub::EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::Interface::EndProcessResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Interface::EndProcessReq, ::Interface::EndProcessResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndProcess_, context, request, response);
}

void MPUInterface::Stub::async::EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Interface::EndProcessReq, ::Interface::EndProcessResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndProcess_, context, request, response, std::move(f));
}

void MPUInterface::Stub::async::EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndProcess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>* MPUInterface::Stub::PrepareAsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Interface::EndProcessResp, ::Interface::EndProcessReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndProcess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>* MPUInterface::Stub::AsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Interface::ActionInfoResp>* MPUInterface::Stub::ActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::Interface::ActionInfoResp>::Create(channel_.get(), rpcmethod_ActionList_, context, request);
}

void MPUInterface::Stub::async::ActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq* request, ::grpc::ClientReadReactor< ::Interface::ActionInfoResp>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Interface::ActionInfoResp>::Create(stub_->channel_.get(), stub_->rpcmethod_ActionList_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>* MPUInterface::Stub::AsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Interface::ActionInfoResp>::Create(channel_.get(), cq, rpcmethod_ActionList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>* MPUInterface::Stub::PrepareAsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Interface::ActionInfoResp>::Create(channel_.get(), cq, rpcmethod_ActionList_, context, request, false, nullptr);
}

MPUInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPUInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MPUInterface::Service, ::Interface::InitSessionReq, ::Interface::InitSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MPUInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Interface::InitSessionReq* req,
             ::Interface::InitSessionResp* resp) {
               return service->InitSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPUInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MPUInterface::Service, ::Interface::EndSessionReq, ::Interface::EndSessionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MPUInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Interface::EndSessionReq* req,
             ::Interface::EndSessionResp* resp) {
               return service->EndSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPUInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MPUInterface::Service, ::Interface::ConfigReq, ::Interface::ConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MPUInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Interface::ConfigReq* req,
             ::Interface::ConfigResp* resp) {
               return service->ConfigProcess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPUInterface_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MPUInterface::Service, ::Interface::EndProcessReq, ::Interface::EndProcessResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MPUInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Interface::EndProcessReq* req,
             ::Interface::EndProcessResp* resp) {
               return service->EndProcess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MPUInterface_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MPUInterface::Service, ::Interface::ActionInfoReq, ::Interface::ActionInfoResp>(
          [](MPUInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Interface::ActionInfoReq* req,
             ::grpc::ServerWriter<::Interface::ActionInfoResp>* writer) {
               return service->ActionList(ctx, req, writer);
             }, this)));
}

MPUInterface::Service::~Service() {
}

::grpc::Status MPUInterface::Service::InitSession(::grpc::ServerContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MPUInterface::Service::EndSession(::grpc::ServerContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MPUInterface::Service::ConfigProcess(::grpc::ServerContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MPUInterface::Service::EndProcess(::grpc::ServerContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MPUInterface::Service::ActionList(::grpc::ServerContext* context, const ::Interface::ActionInfoReq* request, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Interface

