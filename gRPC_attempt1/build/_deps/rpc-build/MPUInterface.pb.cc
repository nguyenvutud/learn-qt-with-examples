// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MPUInterface.proto

#include "MPUInterface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Interface {
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reqid_(0){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr ActionInfoReq::ActionInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , processid_(0){}
struct ActionInfoReqDefaultTypeInternal {
  constexpr ActionInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionInfoReqDefaultTypeInternal() {}
  union {
    ActionInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionInfoReqDefaultTypeInternal _ActionInfoReq_default_instance_;
constexpr ActionInfoResp::ActionInfoResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hdr_(nullptr)
  , processid_(0)
  , actionid_(0)
{}
struct ActionInfoRespDefaultTypeInternal {
  constexpr ActionInfoRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionInfoRespDefaultTypeInternal() {}
  union {
    ActionInfoResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionInfoRespDefaultTypeInternal _ActionInfoResp_default_instance_;
constexpr InitSessionReq::InitSessionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reqid_(0){}
struct InitSessionReqDefaultTypeInternal {
  constexpr InitSessionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSessionReqDefaultTypeInternal() {}
  union {
    InitSessionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSessionReqDefaultTypeInternal _InitSessionReq_default_instance_;
constexpr InitSessionResp::InitSessionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , err_(0)
{}
struct InitSessionRespDefaultTypeInternal {
  constexpr InitSessionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSessionRespDefaultTypeInternal() {}
  union {
    InitSessionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSessionRespDefaultTypeInternal _InitSessionResp_default_instance_;
constexpr EndSessionReq::EndSessionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr){}
struct EndSessionReqDefaultTypeInternal {
  constexpr EndSessionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndSessionReqDefaultTypeInternal() {}
  union {
    EndSessionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndSessionReqDefaultTypeInternal _EndSessionReq_default_instance_;
constexpr EndSessionResp::EndSessionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , err_(0)
{}
struct EndSessionRespDefaultTypeInternal {
  constexpr EndSessionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndSessionRespDefaultTypeInternal() {}
  union {
    EndSessionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndSessionRespDefaultTypeInternal _EndSessionResp_default_instance_;
constexpr deviceInfo::deviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct deviceInfoDefaultTypeInternal {
  constexpr deviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~deviceInfoDefaultTypeInternal() {}
  union {
    deviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT deviceInfoDefaultTypeInternal _deviceInfo_default_instance_;
constexpr PersonInfo::PersonInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_()
  , personid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lefthanded_(false){}
struct PersonInfoDefaultTypeInternal {
  constexpr PersonInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PersonInfoDefaultTypeInternal() {}
  union {
    PersonInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PersonInfoDefaultTypeInternal _PersonInfo_default_instance_;
constexpr ConfigReq::ConfigReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , person_(nullptr)
  , dbinfo_(nullptr)
  , processid_(0)
  , appinfo_(0)
{}
struct ConfigReqDefaultTypeInternal {
  constexpr ConfigReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigReqDefaultTypeInternal() {}
  union {
    ConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigReqDefaultTypeInternal _ConfigReq_default_instance_;
constexpr DbInfo::DbInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validationbucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , measurement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DbInfoDefaultTypeInternal {
  constexpr DbInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbInfoDefaultTypeInternal() {}
  union {
    DbInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbInfoDefaultTypeInternal _DbInfo_default_instance_;
constexpr ConfigResp::ConfigResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , cfgstat_(0)

  , processid_(0)
  , err_(0)
{}
struct ConfigRespDefaultTypeInternal {
  constexpr ConfigRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigRespDefaultTypeInternal() {}
  union {
    ConfigResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigRespDefaultTypeInternal _ConfigResp_default_instance_;
constexpr EndProcessReq::EndProcessReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , processid_(0){}
struct EndProcessReqDefaultTypeInternal {
  constexpr EndProcessReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndProcessReqDefaultTypeInternal() {}
  union {
    EndProcessReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndProcessReqDefaultTypeInternal _EndProcessReq_default_instance_;
constexpr EndProcessResp::EndProcessResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdr_(nullptr)
  , processid_(0)
  , err_(0)
{}
struct EndProcessRespDefaultTypeInternal {
  constexpr EndProcessRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndProcessRespDefaultTypeInternal() {}
  union {
    EndProcessResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndProcessRespDefaultTypeInternal _EndProcessResp_default_instance_;
}  // namespace Interface
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MPUInterface_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MPUInterface_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MPUInterface_2eproto = nullptr;

const uint32_t TableStruct_MPUInterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::Header, sessionid_),
  PROTOBUF_FIELD_OFFSET(::Interface::Header, reqid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoReq, processid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, processid_),
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, actionid_),
  PROTOBUF_FIELD_OFFSET(::Interface::ActionInfoResp, actionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::InitSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::InitSessionReq, reqid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::InitSessionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::InitSessionResp, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::InitSessionResp, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::EndSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::EndSessionReq, hdr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::EndSessionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::EndSessionResp, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::EndSessionResp, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::deviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::deviceInfo, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::PersonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::PersonInfo, personid_),
  PROTOBUF_FIELD_OFFSET(::Interface::PersonInfo, devices_),
  PROTOBUF_FIELD_OFFSET(::Interface::PersonInfo, lefthanded_),
  PROTOBUF_FIELD_OFFSET(::Interface::PersonInfo, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, person_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, dbinfo_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, processid_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigReq, appinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, port_),
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, databucket_),
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, validationbucket_),
  PROTOBUF_FIELD_OFFSET(::Interface::DbInfo, measurement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigResp, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigResp, cfgstat_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigResp, processid_),
  PROTOBUF_FIELD_OFFSET(::Interface::ConfigResp, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessReq, processid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessResp, hdr_),
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessResp, processid_),
  PROTOBUF_FIELD_OFFSET(::Interface::EndProcessResp, err_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Interface::Header)},
  { 8, -1, -1, sizeof(::Interface::ActionInfoReq)},
  { 16, -1, -1, sizeof(::Interface::ActionInfoResp)},
  { 27, -1, -1, sizeof(::Interface::InitSessionReq)},
  { 34, -1, -1, sizeof(::Interface::InitSessionResp)},
  { 42, -1, -1, sizeof(::Interface::EndSessionReq)},
  { 49, -1, -1, sizeof(::Interface::EndSessionResp)},
  { 57, -1, -1, sizeof(::Interface::deviceInfo)},
  { 64, -1, -1, sizeof(::Interface::PersonInfo)},
  { 74, -1, -1, sizeof(::Interface::ConfigReq)},
  { 85, -1, -1, sizeof(::Interface::DbInfo)},
  { 96, -1, -1, sizeof(::Interface::ConfigResp)},
  { 106, -1, -1, sizeof(::Interface::EndProcessReq)},
  { 114, -1, -1, sizeof(::Interface::EndProcessResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_ActionInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_ActionInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_InitSessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_InitSessionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_EndSessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_EndSessionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_deviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_PersonInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_ConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_DbInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_ConfigResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_EndProcessReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Interface::_EndProcessResp_default_instance_),
};

const char descriptor_table_protodef_MPUInterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022MPUInterface.proto\022\tInterface\"*\n\006Heade"
  "r\022\021\n\tsessionId\030\001 \001(\t\022\r\n\005reqId\030\002 \001(\005\"B\n\rA"
  "ctionInfoReq\022\036\n\003hdr\030\001 \001(\0132\021.Interface.He"
  "ader\022\021\n\tprocessId\030\002 \001(\005\"\223\001\n\016ActionInfoRe"
  "sp\022\036\n\003hdr\030\001 \001(\0132\021.Interface.Header\022\021\n\tpr"
  "ocessId\030\002 \001(\005\022\021\n\ttimeStamp\030\003 \001(\t\022\'\n\010acti"
  "onId\030\004 \001(\0162\025.Interface.ActionType\022\022\n\nact"
  "ionName\030\005 \001(\t\"\037\n\016InitSessionReq\022\r\n\005reqId"
  "\030\001 \001(\005\"T\n\017InitSessionResp\022\036\n\003hdr\030\001 \001(\0132\021"
  ".Interface.Header\022!\n\003err\030\002 \001(\0162\024.Interfa"
  "ce.ErrorType\"/\n\rEndSessionReq\022\036\n\003hdr\030\001 \001"
  "(\0132\021.Interface.Header\"S\n\016EndSessionResp\022"
  "\036\n\003hdr\030\001 \001(\0132\021.Interface.Header\022!\n\003err\030\002"
  " \001(\0162\024.Interface.ErrorType\"\036\n\ndeviceInfo"
  "\022\020\n\010deviceId\030\001 \001(\t\"j\n\nPersonInfo\022\020\n\010pers"
  "onId\030\001 \001(\t\022&\n\007devices\030\002 \003(\0132\025.Interface."
  "deviceInfo\022\022\n\nleftHanded\030\003 \001(\010\022\016\n\006taskId"
  "\030\004 \001(\t\"\265\001\n\tConfigReq\022\036\n\003hdr\030\001 \001(\0132\021.Inte"
  "rface.Header\022%\n\006person\030\002 \001(\0132\025.Interface"
  ".PersonInfo\022!\n\006dBInfo\030\003 \001(\0132\021.Interface."
  "DbInfo\022\021\n\tprocessId\030\004 \001(\005\022+\n\007appInfo\030\005 \001"
  "(\0162\032.Interface.ApplicationType\"e\n\006DbInfo"
  "\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\022\022\n\ndataBucket"
  "\030\003 \001(\t\022\030\n\020validationBucket\030\004 \001(\t\022\023\n\013meas"
  "urement\030\005 \001(\t\"\220\001\n\nConfigResp\022\036\n\003hdr\030\001 \001("
  "\0132\021.Interface.Header\022,\n\007cfgStat\030\002 \001(\0162\033."
  "Interface.ConfigStatusType\022\021\n\tprocessId\030"
  "\003 \001(\005\022!\n\003err\030\004 \001(\0162\024.Interface.ErrorType"
  "\"B\n\rEndProcessReq\022\036\n\003hdr\030\001 \001(\0132\021.Interfa"
  "ce.Header\022\021\n\tprocessId\030\002 \001(\005\"f\n\016EndProce"
  "ssResp\022\036\n\003hdr\030\001 \001(\0132\021.Interface.Header\022\021"
  "\n\tprocessId\030\002 \001(\005\022!\n\003err\030\003 \001(\0162\024.Interfa"
  "ce.ErrorType*\312\002\n\tErrorType\022\014\n\010eSUCCESS\020\000"
  "\022\024\n\020eNO_DEVICE_FOUND\020\001\022\023\n\017eNO_MODEL_FOUN"
  "D\020\002\022\022\n\016eNO_DATA_IN_DB\020\003\022\033\n\027eCANNOT_EXECU"
  "TE_FEATURE\020\004\022\027\n\023eDATA_SIZE_MISMATCH\020\005\022\024\n"
  "\020eNO_PERSON_FOUND\020\006\022\027\n\023eCANNOT_ADD_SESSI"
  "ON\020\007\022\032\n\026eCANNOT_DELETE_SESSION\020\010\022\025\n\021eNO_"
  "SESSION_FOUND\020\t\022#\n\037eNO_SKILL_NOT_MATCH_W"
  "ITH_DEVICE\020\n\022\027\n\023eCANNOT_ADD_PROCESS\020\013\022\032\n"
  "\026eCANNOT_REMOVE_PROCESS\020\014*T\n\017Application"
  "Type\022\017\n\013eEfficiency\020\000\022\r\n\teErgonomy\020\001\022\014\n\010"
  "eQuality\020\002\022\023\n\017eDigitalTrainer\020\003*7\n\020Confi"
  "gStatusType\022\t\n\005eDone\020\000\022\013\n\007eFailed\020\001\022\013\n\007e"
  "OnHold\020\002*\277\001\n\nActionType\022\017\n\013eToPosition\020\000"
  "\022\013\n\007eToGlue\020\001\022\023\n\017eToTightenLoose\020\002\022\016\n\neT"
  "oTighten\020\003\022\030\n\024eToTightenWithTorque\020\004\022\013\n\007"
  "eToPlug\020\005\022\r\n\teToGrease\020\006\022\022\n\016eToCutToLeng"
  "th\020\007\022\016\n\neToInstall\020\010\022\024\n\020eToApplyAdhesive"
  "\020\t2\347\002\n\014MPUInterface\022F\n\013InitSession\022\031.Int"
  "erface.InitSessionReq\032\032.Interface.InitSe"
  "ssionResp\"\000\022C\n\nEndSession\022\030.Interface.En"
  "dSessionReq\032\031.Interface.EndSessionResp\"\000"
  "\022>\n\rConfigProcess\022\024.Interface.ConfigReq\032"
  "\025.Interface.ConfigResp\"\000\022C\n\nEndProcess\022\030"
  ".Interface.EndProcessReq\032\031.Interface.End"
  "ProcessResp\"\000\022E\n\nActionList\022\030.Interface."
  "ActionInfoReq\032\031.Interface.ActionInfoResp"
  "\"\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MPUInterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MPUInterface_2eproto = {
  false, false, 2332, descriptor_table_protodef_MPUInterface_2eproto, "MPUInterface.proto", 
  &descriptor_table_MPUInterface_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_MPUInterface_2eproto::offsets,
  file_level_metadata_MPUInterface_2eproto, file_level_enum_descriptors_MPUInterface_2eproto, file_level_service_descriptors_MPUInterface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MPUInterface_2eproto_getter() {
  return &descriptor_table_MPUInterface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MPUInterface_2eproto(&descriptor_table_MPUInterface_2eproto);
namespace Interface {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MPUInterface_2eproto);
  return file_level_enum_descriptors_MPUInterface_2eproto[0];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplicationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MPUInterface_2eproto);
  return file_level_enum_descriptors_MPUInterface_2eproto[1];
}
bool ApplicationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MPUInterface_2eproto);
  return file_level_enum_descriptors_MPUInterface_2eproto[2];
}
bool ConfigStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MPUInterface_2eproto);
  return file_level_enum_descriptors_MPUInterface_2eproto[3];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  reqid_ = from.reqid_;
  // @@protoc_insertion_point(copy_constructor:Interface.Header)
}

inline void Header::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reqid_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Interface.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  reqid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.Header.sessionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.Header.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // int32 reqId = 2;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // int32 reqId = 2;
  if (this->_internal_reqid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  swap(reqid_, other->reqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[0]);
}

// ===================================================================

class ActionInfoReq::_Internal {
 public:
  static const ::Interface::Header& hdr(const ActionInfoReq* msg);
};

const ::Interface::Header&
ActionInfoReq::_Internal::hdr(const ActionInfoReq* msg) {
  return *msg->hdr_;
}
ActionInfoReq::ActionInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.ActionInfoReq)
}
ActionInfoReq::ActionInfoReq(const ActionInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  processid_ = from.processid_;
  // @@protoc_insertion_point(copy_constructor:Interface.ActionInfoReq)
}

inline void ActionInfoReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(processid_));
}

ActionInfoReq::~ActionInfoReq() {
  // @@protoc_insertion_point(destructor:Interface.ActionInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void ActionInfoReq::ArenaDtor(void* object) {
  ActionInfoReq* _this = reinterpret_cast< ActionInfoReq* >(object);
  (void)_this;
}
void ActionInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.ActionInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  processid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.ActionInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.ActionInfoReq)
  return target;
}

size_t ActionInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.ActionInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionInfoReq::GetClassData() const { return &_class_data_; }

void ActionInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionInfoReq *>(to)->MergeFrom(
      static_cast<const ActionInfoReq &>(from));
}


void ActionInfoReq::MergeFrom(const ActionInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.ActionInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionInfoReq::CopyFrom(const ActionInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.ActionInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInfoReq::IsInitialized() const {
  return true;
}

void ActionInfoReq::InternalSwap(ActionInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionInfoReq, processid_)
      + sizeof(ActionInfoReq::processid_)
      - PROTOBUF_FIELD_OFFSET(ActionInfoReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionInfoReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[1]);
}

// ===================================================================

class ActionInfoResp::_Internal {
 public:
  static const ::Interface::Header& hdr(const ActionInfoResp* msg);
};

const ::Interface::Header&
ActionInfoResp::_Internal::hdr(const ActionInfoResp* msg) {
  return *msg->hdr_;
}
ActionInfoResp::ActionInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.ActionInfoResp)
}
ActionInfoResp::ActionInfoResp(const ActionInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  actionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actionname().empty()) {
    actionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  ::memcpy(&processid_, &from.processid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&processid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:Interface.ActionInfoResp)
}

inline void ActionInfoResp::SharedCtor() {
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
actionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(actionid_));
}

ActionInfoResp::~ActionInfoResp() {
  // @@protoc_insertion_point(destructor:Interface.ActionInfoResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdr_;
}

void ActionInfoResp::ArenaDtor(void* object) {
  ActionInfoResp* _this = reinterpret_cast< ActionInfoResp* >(object);
  (void)_this;
}
void ActionInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.ActionInfoResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmpty();
  actionname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  ::memset(&processid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&processid_)) + sizeof(actionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.ActionInfoResp.timeStamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ActionType actionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actionid(static_cast<::Interface::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string actionName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_actionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.ActionInfoResp.actionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionInfoResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.ActionInfoResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  // string timeStamp = 3;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.ActionInfoResp.timeStamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  // .Interface.ActionType actionId = 4;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_actionid(), target);
  }

  // string actionName = 5;
  if (!this->_internal_actionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionname().data(), static_cast<int>(this->_internal_actionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.ActionInfoResp.actionName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_actionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.ActionInfoResp)
  return target;
}

size_t ActionInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.ActionInfoResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timeStamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string actionName = 5;
  if (!this->_internal_actionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionname());
  }

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  // .Interface.ActionType actionId = 4;
  if (this->_internal_actionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionInfoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionInfoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionInfoResp::GetClassData() const { return &_class_data_; }

void ActionInfoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionInfoResp *>(to)->MergeFrom(
      static_cast<const ActionInfoResp &>(from));
}


void ActionInfoResp::MergeFrom(const ActionInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.ActionInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_actionname().empty()) {
    _internal_set_actionname(from._internal_actionname());
  }
  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from._internal_actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionInfoResp::CopyFrom(const ActionInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.ActionInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInfoResp::IsInitialized() const {
  return true;
}

void ActionInfoResp::InternalSwap(ActionInfoResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionname_, lhs_arena,
      &other->actionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionInfoResp, actionid_)
      + sizeof(ActionInfoResp::actionid_)
      - PROTOBUF_FIELD_OFFSET(ActionInfoResp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionInfoResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[2]);
}

// ===================================================================

class InitSessionReq::_Internal {
 public:
};

InitSessionReq::InitSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.InitSessionReq)
}
InitSessionReq::InitSessionReq(const InitSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reqid_ = from.reqid_;
  // @@protoc_insertion_point(copy_constructor:Interface.InitSessionReq)
}

inline void InitSessionReq::SharedCtor() {
reqid_ = 0;
}

InitSessionReq::~InitSessionReq() {
  // @@protoc_insertion_point(destructor:Interface.InitSessionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSessionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitSessionReq::ArenaDtor(void* object) {
  InitSessionReq* _this = reinterpret_cast< InitSessionReq* >(object);
  (void)_this;
}
void InitSessionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.InitSessionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSessionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.InitSessionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.InitSessionReq)
  return target;
}

size_t InitSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.InitSessionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->_internal_reqid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSessionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSessionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSessionReq::GetClassData() const { return &_class_data_; }

void InitSessionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSessionReq *>(to)->MergeFrom(
      static_cast<const InitSessionReq &>(from));
}


void InitSessionReq::MergeFrom(const InitSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.InitSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSessionReq::CopyFrom(const InitSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.InitSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSessionReq::IsInitialized() const {
  return true;
}

void InitSessionReq::InternalSwap(InitSessionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reqid_, other->reqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSessionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[3]);
}

// ===================================================================

class InitSessionResp::_Internal {
 public:
  static const ::Interface::Header& hdr(const InitSessionResp* msg);
};

const ::Interface::Header&
InitSessionResp::_Internal::hdr(const InitSessionResp* msg) {
  return *msg->hdr_;
}
InitSessionResp::InitSessionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.InitSessionResp)
}
InitSessionResp::InitSessionResp(const InitSessionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:Interface.InitSessionResp)
}

inline void InitSessionResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(err_));
}

InitSessionResp::~InitSessionResp() {
  // @@protoc_insertion_point(destructor:Interface.InitSessionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSessionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void InitSessionResp::ArenaDtor(void* object) {
  InitSessionResp* _this = reinterpret_cast< InitSessionResp* >(object);
  (void)_this;
}
void InitSessionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSessionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSessionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.InitSessionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSessionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ErrorType err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::Interface::ErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSessionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.InitSessionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // .Interface.ErrorType err = 2;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.InitSessionResp)
  return target;
}

size_t InitSessionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.InitSessionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .Interface.ErrorType err = 2;
  if (this->_internal_err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSessionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSessionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSessionResp::GetClassData() const { return &_class_data_; }

void InitSessionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSessionResp *>(to)->MergeFrom(
      static_cast<const InitSessionResp &>(from));
}


void InitSessionResp::MergeFrom(const InitSessionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.InitSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSessionResp::CopyFrom(const InitSessionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.InitSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSessionResp::IsInitialized() const {
  return true;
}

void InitSessionResp::InternalSwap(InitSessionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSessionResp, err_)
      + sizeof(InitSessionResp::err_)
      - PROTOBUF_FIELD_OFFSET(InitSessionResp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSessionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[4]);
}

// ===================================================================

class EndSessionReq::_Internal {
 public:
  static const ::Interface::Header& hdr(const EndSessionReq* msg);
};

const ::Interface::Header&
EndSessionReq::_Internal::hdr(const EndSessionReq* msg) {
  return *msg->hdr_;
}
EndSessionReq::EndSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.EndSessionReq)
}
EndSessionReq::EndSessionReq(const EndSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Interface.EndSessionReq)
}

inline void EndSessionReq::SharedCtor() {
hdr_ = nullptr;
}

EndSessionReq::~EndSessionReq() {
  // @@protoc_insertion_point(destructor:Interface.EndSessionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndSessionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void EndSessionReq::ArenaDtor(void* object) {
  EndSessionReq* _this = reinterpret_cast< EndSessionReq* >(object);
  (void)_this;
}
void EndSessionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.EndSessionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndSessionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.EndSessionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.EndSessionReq)
  return target;
}

size_t EndSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.EndSessionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndSessionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndSessionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndSessionReq::GetClassData() const { return &_class_data_; }

void EndSessionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndSessionReq *>(to)->MergeFrom(
      static_cast<const EndSessionReq &>(from));
}


void EndSessionReq::MergeFrom(const EndSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.EndSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndSessionReq::CopyFrom(const EndSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.EndSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSessionReq::IsInitialized() const {
  return true;
}

void EndSessionReq::InternalSwap(EndSessionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(hdr_, other->hdr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndSessionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[5]);
}

// ===================================================================

class EndSessionResp::_Internal {
 public:
  static const ::Interface::Header& hdr(const EndSessionResp* msg);
};

const ::Interface::Header&
EndSessionResp::_Internal::hdr(const EndSessionResp* msg) {
  return *msg->hdr_;
}
EndSessionResp::EndSessionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.EndSessionResp)
}
EndSessionResp::EndSessionResp(const EndSessionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:Interface.EndSessionResp)
}

inline void EndSessionResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(err_));
}

EndSessionResp::~EndSessionResp() {
  // @@protoc_insertion_point(destructor:Interface.EndSessionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndSessionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void EndSessionResp::ArenaDtor(void* object) {
  EndSessionResp* _this = reinterpret_cast< EndSessionResp* >(object);
  (void)_this;
}
void EndSessionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndSessionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndSessionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.EndSessionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndSessionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ErrorType err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::Interface::ErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndSessionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.EndSessionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // .Interface.ErrorType err = 2;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.EndSessionResp)
  return target;
}

size_t EndSessionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.EndSessionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .Interface.ErrorType err = 2;
  if (this->_internal_err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndSessionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndSessionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndSessionResp::GetClassData() const { return &_class_data_; }

void EndSessionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndSessionResp *>(to)->MergeFrom(
      static_cast<const EndSessionResp &>(from));
}


void EndSessionResp::MergeFrom(const EndSessionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.EndSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndSessionResp::CopyFrom(const EndSessionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.EndSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSessionResp::IsInitialized() const {
  return true;
}

void EndSessionResp::InternalSwap(EndSessionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndSessionResp, err_)
      + sizeof(EndSessionResp::err_)
      - PROTOBUF_FIELD_OFFSET(EndSessionResp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndSessionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[6]);
}

// ===================================================================

class deviceInfo::_Internal {
 public:
};

deviceInfo::deviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.deviceInfo)
}
deviceInfo::deviceInfo(const deviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Interface.deviceInfo)
}

inline void deviceInfo::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

deviceInfo::~deviceInfo() {
  // @@protoc_insertion_point(destructor:Interface.deviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void deviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void deviceInfo::ArenaDtor(void* object) {
  deviceInfo* _this = reinterpret_cast< deviceInfo* >(object);
  (void)_this;
}
void deviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.deviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.deviceInfo.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.deviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.deviceInfo.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.deviceInfo)
  return target;
}

size_t deviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.deviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    deviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deviceInfo::GetClassData() const { return &_class_data_; }

void deviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<deviceInfo *>(to)->MergeFrom(
      static_cast<const deviceInfo &>(from));
}


void deviceInfo::MergeFrom(const deviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.deviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deviceInfo::CopyFrom(const deviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.deviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceInfo::IsInitialized() const {
  return true;
}

void deviceInfo::InternalSwap(deviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata deviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[7]);
}

// ===================================================================

class PersonInfo::_Internal {
 public:
};

PersonInfo::PersonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  devices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.PersonInfo)
}
PersonInfo::PersonInfo(const PersonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  personid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    personid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_personid().empty()) {
    personid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_personid(), 
      GetArenaForAllocation());
  }
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  lefthanded_ = from.lefthanded_;
  // @@protoc_insertion_point(copy_constructor:Interface.PersonInfo)
}

inline void PersonInfo::SharedCtor() {
personid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  personid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lefthanded_ = false;
}

PersonInfo::~PersonInfo() {
  // @@protoc_insertion_point(destructor:Interface.PersonInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PersonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  personid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersonInfo::ArenaDtor(void* object) {
  PersonInfo* _this = reinterpret_cast< PersonInfo* >(object);
  (void)_this;
}
void PersonInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PersonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.PersonInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  personid_.ClearToEmpty();
  taskid_.ClearToEmpty();
  lefthanded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string personId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_personid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.PersonInfo.personId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Interface.deviceInfo devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool leftHanded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lefthanded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string taskId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.PersonInfo.taskId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersonInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.PersonInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string personId = 1;
  if (!this->_internal_personid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_personid().data(), static_cast<int>(this->_internal_personid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.PersonInfo.personId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_personid(), target);
  }

  // repeated .Interface.deviceInfo devices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_devices(i), target, stream);
  }

  // bool leftHanded = 3;
  if (this->_internal_lefthanded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lefthanded(), target);
  }

  // string taskId = 4;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.PersonInfo.taskId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.PersonInfo)
  return target;
}

size_t PersonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.PersonInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Interface.deviceInfo devices = 2;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string personId = 1;
  if (!this->_internal_personid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_personid());
  }

  // string taskId = 4;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bool leftHanded = 3;
  if (this->_internal_lefthanded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersonInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PersonInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersonInfo::GetClassData() const { return &_class_data_; }

void PersonInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PersonInfo *>(to)->MergeFrom(
      static_cast<const PersonInfo &>(from));
}


void PersonInfo::MergeFrom(const PersonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.PersonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (!from._internal_personid().empty()) {
    _internal_set_personid(from._internal_personid());
  }
  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_lefthanded() != 0) {
    _internal_set_lefthanded(from._internal_lefthanded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersonInfo::CopyFrom(const PersonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.PersonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonInfo::IsInitialized() const {
  return true;
}

void PersonInfo::InternalSwap(PersonInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &personid_, lhs_arena,
      &other->personid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  swap(lefthanded_, other->lefthanded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[8]);
}

// ===================================================================

class ConfigReq::_Internal {
 public:
  static const ::Interface::Header& hdr(const ConfigReq* msg);
  static const ::Interface::PersonInfo& person(const ConfigReq* msg);
  static const ::Interface::DbInfo& dbinfo(const ConfigReq* msg);
};

const ::Interface::Header&
ConfigReq::_Internal::hdr(const ConfigReq* msg) {
  return *msg->hdr_;
}
const ::Interface::PersonInfo&
ConfigReq::_Internal::person(const ConfigReq* msg) {
  return *msg->person_;
}
const ::Interface::DbInfo&
ConfigReq::_Internal::dbinfo(const ConfigReq* msg) {
  return *msg->dbinfo_;
}
ConfigReq::ConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.ConfigReq)
}
ConfigReq::ConfigReq(const ConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_person()) {
    person_ = new ::Interface::PersonInfo(*from.person_);
  } else {
    person_ = nullptr;
  }
  if (from._internal_has_dbinfo()) {
    dbinfo_ = new ::Interface::DbInfo(*from.dbinfo_);
  } else {
    dbinfo_ = nullptr;
  }
  ::memcpy(&processid_, &from.processid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appinfo_) -
    reinterpret_cast<char*>(&processid_)) + sizeof(appinfo_));
  // @@protoc_insertion_point(copy_constructor:Interface.ConfigReq)
}

inline void ConfigReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appinfo_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(appinfo_));
}

ConfigReq::~ConfigReq() {
  // @@protoc_insertion_point(destructor:Interface.ConfigReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete person_;
  if (this != internal_default_instance()) delete dbinfo_;
}

void ConfigReq::ArenaDtor(void* object) {
  ConfigReq* _this = reinterpret_cast< ConfigReq* >(object);
  (void)_this;
}
void ConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.ConfigReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && person_ != nullptr) {
    delete person_;
  }
  person_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dbinfo_ != nullptr) {
    delete dbinfo_;
  }
  dbinfo_ = nullptr;
  ::memset(&processid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appinfo_) -
      reinterpret_cast<char*>(&processid_)) + sizeof(appinfo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.PersonInfo person = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_person(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.DbInfo dBInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dbinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ApplicationType appInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appinfo(static_cast<::Interface::ApplicationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.ConfigReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // .Interface.PersonInfo person = 2;
  if (this->_internal_has_person()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::person(this), target, stream);
  }

  // .Interface.DbInfo dBInfo = 3;
  if (this->_internal_has_dbinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dbinfo(this), target, stream);
  }

  // int32 processId = 4;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_processid(), target);
  }

  // .Interface.ApplicationType appInfo = 5;
  if (this->_internal_appinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_appinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.ConfigReq)
  return target;
}

size_t ConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.ConfigReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .Interface.PersonInfo person = 2;
  if (this->_internal_has_person()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *person_);
  }

  // .Interface.DbInfo dBInfo = 3;
  if (this->_internal_has_dbinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dbinfo_);
  }

  // int32 processId = 4;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  // .Interface.ApplicationType appInfo = 5;
  if (this->_internal_appinfo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_appinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigReq::GetClassData() const { return &_class_data_; }

void ConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigReq *>(to)->MergeFrom(
      static_cast<const ConfigReq &>(from));
}


void ConfigReq::MergeFrom(const ConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.ConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_has_person()) {
    _internal_mutable_person()->::Interface::PersonInfo::MergeFrom(from._internal_person());
  }
  if (from._internal_has_dbinfo()) {
    _internal_mutable_dbinfo()->::Interface::DbInfo::MergeFrom(from._internal_dbinfo());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from._internal_appinfo() != 0) {
    _internal_set_appinfo(from._internal_appinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigReq::CopyFrom(const ConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.ConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigReq::IsInitialized() const {
  return true;
}

void ConfigReq::InternalSwap(ConfigReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigReq, appinfo_)
      + sizeof(ConfigReq::appinfo_)
      - PROTOBUF_FIELD_OFFSET(ConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[9]);
}

// ===================================================================

class DbInfo::_Internal {
 public:
};

DbInfo::DbInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.DbInfo)
}
DbInfo::DbInfo(const DbInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port(), 
      GetArenaForAllocation());
  }
  databucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    databucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_databucket().empty()) {
    databucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databucket(), 
      GetArenaForAllocation());
  }
  validationbucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    validationbucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validationbucket().empty()) {
    validationbucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validationbucket(), 
      GetArenaForAllocation());
  }
  measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_measurement().empty()) {
    measurement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_measurement(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Interface.DbInfo)
}

inline void DbInfo::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
databucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  databucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
validationbucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  validationbucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DbInfo::~DbInfo() {
  // @@protoc_insertion_point(destructor:Interface.DbInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DbInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  databucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validationbucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  measurement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DbInfo::ArenaDtor(void* object) {
  DbInfo* _this = reinterpret_cast< DbInfo* >(object);
  (void)_this;
}
void DbInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.DbInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_.ClearToEmpty();
  databucket_.ClearToEmpty();
  validationbucket_.ClearToEmpty();
  measurement_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.DbInfo.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.DbInfo.port"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataBucket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_databucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.DbInfo.dataBucket"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string validationBucket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_validationbucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.DbInfo.validationBucket"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string measurement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_measurement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Interface.DbInfo.measurement"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DbInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.DbInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.DbInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.DbInfo.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // string dataBucket = 3;
  if (!this->_internal_databucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databucket().data(), static_cast<int>(this->_internal_databucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.DbInfo.dataBucket");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_databucket(), target);
  }

  // string validationBucket = 4;
  if (!this->_internal_validationbucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validationbucket().data(), static_cast<int>(this->_internal_validationbucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.DbInfo.validationBucket");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validationbucket(), target);
  }

  // string measurement = 5;
  if (!this->_internal_measurement().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_measurement().data(), static_cast<int>(this->_internal_measurement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Interface.DbInfo.measurement");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_measurement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.DbInfo)
  return target;
}

size_t DbInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.DbInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string dataBucket = 3;
  if (!this->_internal_databucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databucket());
  }

  // string validationBucket = 4;
  if (!this->_internal_validationbucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validationbucket());
  }

  // string measurement = 5;
  if (!this->_internal_measurement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_measurement());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DbInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbInfo::GetClassData() const { return &_class_data_; }

void DbInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DbInfo *>(to)->MergeFrom(
      static_cast<const DbInfo &>(from));
}


void DbInfo::MergeFrom(const DbInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.DbInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _internal_set_port(from._internal_port());
  }
  if (!from._internal_databucket().empty()) {
    _internal_set_databucket(from._internal_databucket());
  }
  if (!from._internal_validationbucket().empty()) {
    _internal_set_validationbucket(from._internal_validationbucket());
  }
  if (!from._internal_measurement().empty()) {
    _internal_set_measurement(from._internal_measurement());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DbInfo::CopyFrom(const DbInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.DbInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbInfo::IsInitialized() const {
  return true;
}

void DbInfo::InternalSwap(DbInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &port_, lhs_arena,
      &other->port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databucket_, lhs_arena,
      &other->databucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validationbucket_, lhs_arena,
      &other->validationbucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &measurement_, lhs_arena,
      &other->measurement_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DbInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[10]);
}

// ===================================================================

class ConfigResp::_Internal {
 public:
  static const ::Interface::Header& hdr(const ConfigResp* msg);
};

const ::Interface::Header&
ConfigResp::_Internal::hdr(const ConfigResp* msg) {
  return *msg->hdr_;
}
ConfigResp::ConfigResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.ConfigResp)
}
ConfigResp::ConfigResp(const ConfigResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  ::memcpy(&cfgstat_, &from.cfgstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&cfgstat_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:Interface.ConfigResp)
}

inline void ConfigResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(err_));
}

ConfigResp::~ConfigResp() {
  // @@protoc_insertion_point(destructor:Interface.ConfigResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void ConfigResp::ArenaDtor(void* object) {
  ConfigResp* _this = reinterpret_cast< ConfigResp* >(object);
  (void)_this;
}
void ConfigResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.ConfigResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  ::memset(&cfgstat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&cfgstat_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ConfigStatusType cfgStat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cfgstat(static_cast<::Interface::ConfigStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ErrorType err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::Interface::ErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.ConfigResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // .Interface.ConfigStatusType cfgStat = 2;
  if (this->_internal_cfgstat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cfgstat(), target);
  }

  // int32 processId = 3;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_processid(), target);
  }

  // .Interface.ErrorType err = 4;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.ConfigResp)
  return target;
}

size_t ConfigResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.ConfigResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .Interface.ConfigStatusType cfgStat = 2;
  if (this->_internal_cfgstat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cfgstat());
  }

  // int32 processId = 3;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  // .Interface.ErrorType err = 4;
  if (this->_internal_err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigResp::GetClassData() const { return &_class_data_; }

void ConfigResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigResp *>(to)->MergeFrom(
      static_cast<const ConfigResp &>(from));
}


void ConfigResp::MergeFrom(const ConfigResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.ConfigResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_cfgstat() != 0) {
    _internal_set_cfgstat(from._internal_cfgstat());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigResp::CopyFrom(const ConfigResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.ConfigResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResp::IsInitialized() const {
  return true;
}

void ConfigResp::InternalSwap(ConfigResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigResp, err_)
      + sizeof(ConfigResp::err_)
      - PROTOBUF_FIELD_OFFSET(ConfigResp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[11]);
}

// ===================================================================

class EndProcessReq::_Internal {
 public:
  static const ::Interface::Header& hdr(const EndProcessReq* msg);
};

const ::Interface::Header&
EndProcessReq::_Internal::hdr(const EndProcessReq* msg) {
  return *msg->hdr_;
}
EndProcessReq::EndProcessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.EndProcessReq)
}
EndProcessReq::EndProcessReq(const EndProcessReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  processid_ = from.processid_;
  // @@protoc_insertion_point(copy_constructor:Interface.EndProcessReq)
}

inline void EndProcessReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(processid_));
}

EndProcessReq::~EndProcessReq() {
  // @@protoc_insertion_point(destructor:Interface.EndProcessReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndProcessReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void EndProcessReq::ArenaDtor(void* object) {
  EndProcessReq* _this = reinterpret_cast< EndProcessReq* >(object);
  (void)_this;
}
void EndProcessReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndProcessReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndProcessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.EndProcessReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  processid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndProcessReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndProcessReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.EndProcessReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.EndProcessReq)
  return target;
}

size_t EndProcessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.EndProcessReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndProcessReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndProcessReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndProcessReq::GetClassData() const { return &_class_data_; }

void EndProcessReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndProcessReq *>(to)->MergeFrom(
      static_cast<const EndProcessReq &>(from));
}


void EndProcessReq::MergeFrom(const EndProcessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.EndProcessReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndProcessReq::CopyFrom(const EndProcessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.EndProcessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessReq::IsInitialized() const {
  return true;
}

void EndProcessReq::InternalSwap(EndProcessReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndProcessReq, processid_)
      + sizeof(EndProcessReq::processid_)
      - PROTOBUF_FIELD_OFFSET(EndProcessReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndProcessReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[12]);
}

// ===================================================================

class EndProcessResp::_Internal {
 public:
  static const ::Interface::Header& hdr(const EndProcessResp* msg);
};

const ::Interface::Header&
EndProcessResp::_Internal::hdr(const EndProcessResp* msg) {
  return *msg->hdr_;
}
EndProcessResp::EndProcessResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Interface.EndProcessResp)
}
EndProcessResp::EndProcessResp(const EndProcessResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::Interface::Header(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  ::memcpy(&processid_, &from.processid_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&processid_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:Interface.EndProcessResp)
}

inline void EndProcessResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&hdr_)) + sizeof(err_));
}

EndProcessResp::~EndProcessResp() {
  // @@protoc_insertion_point(destructor:Interface.EndProcessResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndProcessResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void EndProcessResp::ArenaDtor(void* object) {
  EndProcessResp* _this = reinterpret_cast< EndProcessResp* >(object);
  (void)_this;
}
void EndProcessResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndProcessResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndProcessResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Interface.EndProcessResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  ::memset(&processid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&processid_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndProcessResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Interface.Header hdr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Interface.ErrorType err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::Interface::ErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndProcessResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interface.EndProcessResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdr(this), target, stream);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  // .Interface.ErrorType err = 3;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interface.EndProcessResp)
  return target;
}

size_t EndProcessResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Interface.EndProcessResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Interface.Header hdr = 1;
  if (this->_internal_has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // int32 processId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  // .Interface.ErrorType err = 3;
  if (this->_internal_err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndProcessResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndProcessResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndProcessResp::GetClassData() const { return &_class_data_; }

void EndProcessResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndProcessResp *>(to)->MergeFrom(
      static_cast<const EndProcessResp &>(from));
}


void EndProcessResp::MergeFrom(const EndProcessResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Interface.EndProcessResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hdr()) {
    _internal_mutable_hdr()->::Interface::Header::MergeFrom(from._internal_hdr());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndProcessResp::CopyFrom(const EndProcessResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Interface.EndProcessResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessResp::IsInitialized() const {
  return true;
}

void EndProcessResp::InternalSwap(EndProcessResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndProcessResp, err_)
      + sizeof(EndProcessResp::err_)
      - PROTOBUF_FIELD_OFFSET(EndProcessResp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndProcessResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MPUInterface_2eproto_getter, &descriptor_table_MPUInterface_2eproto_once,
      file_level_metadata_MPUInterface_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Interface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Interface::Header* Arena::CreateMaybeMessage< ::Interface::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::ActionInfoReq* Arena::CreateMaybeMessage< ::Interface::ActionInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::ActionInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::ActionInfoResp* Arena::CreateMaybeMessage< ::Interface::ActionInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::ActionInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::InitSessionReq* Arena::CreateMaybeMessage< ::Interface::InitSessionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::InitSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::InitSessionResp* Arena::CreateMaybeMessage< ::Interface::InitSessionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::InitSessionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::EndSessionReq* Arena::CreateMaybeMessage< ::Interface::EndSessionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::EndSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::EndSessionResp* Arena::CreateMaybeMessage< ::Interface::EndSessionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::EndSessionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::deviceInfo* Arena::CreateMaybeMessage< ::Interface::deviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::deviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::PersonInfo* Arena::CreateMaybeMessage< ::Interface::PersonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::PersonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::ConfigReq* Arena::CreateMaybeMessage< ::Interface::ConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::ConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::DbInfo* Arena::CreateMaybeMessage< ::Interface::DbInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::DbInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::ConfigResp* Arena::CreateMaybeMessage< ::Interface::ConfigResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::ConfigResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::EndProcessReq* Arena::CreateMaybeMessage< ::Interface::EndProcessReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::EndProcessReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Interface::EndProcessResp* Arena::CreateMaybeMessage< ::Interface::EndProcessResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Interface::EndProcessResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
