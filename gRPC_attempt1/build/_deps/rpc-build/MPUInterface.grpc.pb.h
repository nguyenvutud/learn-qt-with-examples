// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MPUInterface.proto
#ifndef GRPC_MPUInterface_2eproto__INCLUDED
#define GRPC_MPUInterface_2eproto__INCLUDED

#include "MPUInterface.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Interface {

//
// Questions:
// Config den sonra data collection ve ML algoritmalari direk calismaya baslayacak mi, yoksa ekstra bir tetikleme mekanizmasi gerekli mi--> direk calismaya baslayacak
// ML algortimalari sonunda sonuclar database disinda bir yere yazilacak mi, unity sadece grafana bilgilerine mi erisecek? --> database yeterli
// Config skill set bazli var olan config dosyalarina göre otomatik mi olacak yoksa unity tarafindan dosya yükleme vs ile mi gerceklesecek --> otomatik
//
class MPUInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "Interface.MPUInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialization of the session
    virtual ::grpc::Status InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::Interface::InitSessionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>> AsyncInitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>>(AsyncInitSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>> PrepareAsyncInitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>>(PrepareAsyncInitSessionRaw(context, request, cq));
    }
    // End of the session
    virtual ::grpc::Status EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::Interface::EndSessionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>> AsyncEndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>>(AsyncEndSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>> PrepareAsyncEndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>>(PrepareAsyncEndSessionRaw(context, request, cq));
    }
    // Starts new procedure or change config of the existing process
    virtual ::grpc::Status ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::Interface::ConfigResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>> AsyncConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>>(AsyncConfigProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>> PrepareAsyncConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>>(PrepareAsyncConfigProcessRaw(context, request, cq));
    }
    // Ends existing process
    virtual ::grpc::Status EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::Interface::EndProcessResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>> AsyncEndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>>(AsyncEndProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>> PrepareAsyncEndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>>(PrepareAsyncEndProcessRaw(context, request, cq));
    }
    // To get data from
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Interface::ActionInfoResp>> ActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Interface::ActionInfoResp>>(ActionListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>> AsyncActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>>(AsyncActionListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>> PrepareAsyncActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>>(PrepareAsyncActionListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialization of the session
      virtual void InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // End of the session
      virtual void EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Starts new procedure or change config of the existing process
      virtual void ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Ends existing process
      virtual void EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // To get data from
      virtual void ActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq* request, ::grpc::ClientReadReactor< ::Interface::ActionInfoResp>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>* AsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::InitSessionResp>* PrepareAsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>* AsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndSessionResp>* PrepareAsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>* AsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::ConfigResp>* PrepareAsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>* AsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Interface::EndProcessResp>* PrepareAsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Interface::ActionInfoResp>* ActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>* AsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Interface::ActionInfoResp>* PrepareAsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::Interface::InitSessionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>> AsyncInitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>>(AsyncInitSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>> PrepareAsyncInitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>>(PrepareAsyncInitSessionRaw(context, request, cq));
    }
    ::grpc::Status EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::Interface::EndSessionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>> AsyncEndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>>(AsyncEndSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>> PrepareAsyncEndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>>(PrepareAsyncEndSessionRaw(context, request, cq));
    }
    ::grpc::Status ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::Interface::ConfigResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>> AsyncConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>>(AsyncConfigProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>> PrepareAsyncConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>>(PrepareAsyncConfigProcessRaw(context, request, cq));
    }
    ::grpc::Status EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::Interface::EndProcessResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>> AsyncEndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>>(AsyncEndProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>> PrepareAsyncEndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>>(PrepareAsyncEndProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Interface::ActionInfoResp>> ActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Interface::ActionInfoResp>>(ActionListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>> AsyncActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>>(AsyncActionListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>> PrepareAsyncActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>>(PrepareAsyncActionListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, std::function<void(::grpc::Status)>) override;
      void InitSession(::grpc::ClientContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, std::function<void(::grpc::Status)>) override;
      void EndSession(::grpc::ClientContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, std::function<void(::grpc::Status)>) override;
      void ConfigProcess(::grpc::ClientContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, std::function<void(::grpc::Status)>) override;
      void EndProcess(::grpc::ClientContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActionList(::grpc::ClientContext* context, const ::Interface::ActionInfoReq* request, ::grpc::ClientReadReactor< ::Interface::ActionInfoResp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>* AsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::InitSessionResp>* PrepareAsyncInitSessionRaw(::grpc::ClientContext* context, const ::Interface::InitSessionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>* AsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::EndSessionResp>* PrepareAsyncEndSessionRaw(::grpc::ClientContext* context, const ::Interface::EndSessionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>* AsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::ConfigResp>* PrepareAsyncConfigProcessRaw(::grpc::ClientContext* context, const ::Interface::ConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>* AsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Interface::EndProcessResp>* PrepareAsyncEndProcessRaw(::grpc::ClientContext* context, const ::Interface::EndProcessReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Interface::ActionInfoResp>* ActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request) override;
    ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>* AsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Interface::ActionInfoResp>* PrepareAsyncActionListRaw(::grpc::ClientContext* context, const ::Interface::ActionInfoReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitSession_;
    const ::grpc::internal::RpcMethod rpcmethod_EndSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_EndProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_ActionList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialization of the session
    virtual ::grpc::Status InitSession(::grpc::ServerContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response);
    // End of the session
    virtual ::grpc::Status EndSession(::grpc::ServerContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response);
    // Starts new procedure or change config of the existing process
    virtual ::grpc::Status ConfigProcess(::grpc::ServerContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response);
    // Ends existing process
    virtual ::grpc::Status EndProcess(::grpc::ServerContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response);
    // To get data from
    virtual ::grpc::Status ActionList(::grpc::ServerContext* context, const ::Interface::ActionInfoReq* request, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitSession(::grpc::ServerContext* context, ::Interface::InitSessionReq* request, ::grpc::ServerAsyncResponseWriter< ::Interface::InitSessionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndSession(::grpc::ServerContext* context, ::Interface::EndSessionReq* request, ::grpc::ServerAsyncResponseWriter< ::Interface::EndSessionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigProcess(::grpc::ServerContext* context, ::Interface::ConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::Interface::ConfigResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndProcess() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndProcess(::grpc::ServerContext* context, ::Interface::EndProcessReq* request, ::grpc::ServerAsyncResponseWriter< ::Interface::EndProcessResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActionList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActionList(::grpc::ServerContext* context, ::Interface::ActionInfoReq* request, ::grpc::ServerAsyncWriter< ::Interface::ActionInfoResp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitSession<WithAsyncMethod_EndSession<WithAsyncMethod_ConfigProcess<WithAsyncMethod_EndProcess<WithAsyncMethod_ActionList<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Interface::InitSessionReq, ::Interface::InitSessionResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Interface::InitSessionReq* request, ::Interface::InitSessionResp* response) { return this->InitSession(context, request, response); }));}
    void SetMessageAllocatorFor_InitSession(
        ::grpc::MessageAllocator< ::Interface::InitSessionReq, ::Interface::InitSessionResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Interface::InitSessionReq, ::Interface::InitSessionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitSession(
      ::grpc::CallbackServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Interface::EndSessionReq, ::Interface::EndSessionResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Interface::EndSessionReq* request, ::Interface::EndSessionResp* response) { return this->EndSession(context, request, response); }));}
    void SetMessageAllocatorFor_EndSession(
        ::grpc::MessageAllocator< ::Interface::EndSessionReq, ::Interface::EndSessionResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Interface::EndSessionReq, ::Interface::EndSessionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndSession(
      ::grpc::CallbackServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Interface::ConfigReq, ::Interface::ConfigResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Interface::ConfigReq* request, ::Interface::ConfigResp* response) { return this->ConfigProcess(context, request, response); }));}
    void SetMessageAllocatorFor_ConfigProcess(
        ::grpc::MessageAllocator< ::Interface::ConfigReq, ::Interface::ConfigResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Interface::ConfigReq, ::Interface::ConfigResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfigProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndProcess() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Interface::EndProcessReq, ::Interface::EndProcessResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Interface::EndProcessReq* request, ::Interface::EndProcessResp* response) { return this->EndProcess(context, request, response); }));}
    void SetMessageAllocatorFor_EndProcess(
        ::grpc::MessageAllocator< ::Interface::EndProcessReq, ::Interface::EndProcessResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Interface::EndProcessReq, ::Interface::EndProcessResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActionList() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Interface::ActionInfoReq, ::Interface::ActionInfoResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Interface::ActionInfoReq* request) { return this->ActionList(context, request); }));
    }
    ~WithCallbackMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Interface::ActionInfoResp>* ActionList(
      ::grpc::CallbackServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitSession<WithCallbackMethod_EndSession<WithCallbackMethod_ConfigProcess<WithCallbackMethod_EndProcess<WithCallbackMethod_ActionList<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndProcess() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActionList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndProcess() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActionList() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActionList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfigProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfigProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndProcess() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActionList() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ActionList(context, request); }));
    }
    ~WithRawCallbackMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ActionList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Interface::InitSessionReq, ::Interface::InitSessionResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Interface::InitSessionReq, ::Interface::InitSessionResp>* streamer) {
                       return this->StreamedInitSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitSession(::grpc::ServerContext* /*context*/, const ::Interface::InitSessionReq* /*request*/, ::Interface::InitSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Interface::InitSessionReq,::Interface::InitSessionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Interface::EndSessionReq, ::Interface::EndSessionResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Interface::EndSessionReq, ::Interface::EndSessionResp>* streamer) {
                       return this->StreamedEndSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::Interface::EndSessionReq* /*request*/, ::Interface::EndSessionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Interface::EndSessionReq,::Interface::EndSessionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfigProcess() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Interface::ConfigReq, ::Interface::ConfigResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Interface::ConfigReq, ::Interface::ConfigResp>* streamer) {
                       return this->StreamedConfigProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConfigProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigProcess(::grpc::ServerContext* /*context*/, const ::Interface::ConfigReq* /*request*/, ::Interface::ConfigResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Interface::ConfigReq,::Interface::ConfigResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndProcess() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Interface::EndProcessReq, ::Interface::EndProcessResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Interface::EndProcessReq, ::Interface::EndProcessResp>* streamer) {
                       return this->StreamedEndProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndProcess(::grpc::ServerContext* /*context*/, const ::Interface::EndProcessReq* /*request*/, ::Interface::EndProcessResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Interface::EndProcessReq,::Interface::EndProcessResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitSession<WithStreamedUnaryMethod_EndSession<WithStreamedUnaryMethod_ConfigProcess<WithStreamedUnaryMethod_EndProcess<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ActionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ActionList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Interface::ActionInfoReq, ::Interface::ActionInfoResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Interface::ActionInfoReq, ::Interface::ActionInfoResp>* streamer) {
                       return this->StreamedActionList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ActionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActionList(::grpc::ServerContext* /*context*/, const ::Interface::ActionInfoReq* /*request*/, ::grpc::ServerWriter< ::Interface::ActionInfoResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedActionList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Interface::ActionInfoReq,::Interface::ActionInfoResp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ActionList<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitSession<WithStreamedUnaryMethod_EndSession<WithStreamedUnaryMethod_ConfigProcess<WithStreamedUnaryMethod_EndProcess<WithSplitStreamingMethod_ActionList<Service > > > > > StreamedService;
};

}  // namespace Interface


#endif  // GRPC_MPUInterface_2eproto__INCLUDED
